import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.formula.api as smf
import seaborn as sns

# Cargar la base DEMANDA DE VUELOS
data_flights = sns.load_dataset('flights')

# Mostrar las datos de la tabla
data_flights.head()

# periodo mensual
# crear una nueva columna date
data_flights['date'] = pd.to_datetime(data_flights['year'].astype(str) + '-' + data_flights['month'].astype(str) + '-01')

#establecer date como el indice de la serie de tiempo
data_flights.set_index('date', inplace=True)

# guardar la variable de pasajeros en un variable

s_data_flights = data_flights['passengers']

#Mostrar los datos de la tabla
data_flights.head()

# Mostrar la serie temporal
plt.figure(figsize=(12, 6))
plt.plot(s_data_flights, color='blue')

plt.title('Número de pasajeros')
plt.xlabel('Mes')
plt.ylabel('Pasajeros')
plt.show()

# Componentes de una serie: Tendencia, Estacionalidad, Ciclo y Ruido (variación aleatoria)

# Estimación del modelo
# Antes de determinar el modelo, necesitamos ver el correlograma 
# Grado de correlación entre las observaciones pasadas y futuras
from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.graphics.tsaplots import plot_pacf

plot_acf(s_data_flights, lags=24)
plot_pacf(s_data_flights, lags=24)
plt.show()

# Como observamos, el analisis de autocorrelación no disminuye de forma rápida (tendencia) y sigue un patron cada 12 (estacionalidad)
# Por lo tanto la serie no es estacionaria
# Observación: Antes de elegir un modelo, debes tener una serie estacionaria.

# Validar la estacionariedad con ADF Test adfuller
from statsmodels.tsa.stattools import adfuller

result = adfuller(s_data_flights.dropna())
print(f"ADF Statistic: {result[0]}")
print(f"p-value: {result[1]}")

# Si el resultado del p_value es > 0.05, la serie no es estacionaria.

# Con el ADF Test, notamos que la serie no es estacionaria, por ende, debemos realizar la diferenciación

# Obs: Antes de elegir el modelo necesitamos volver a la serie estacionaria

# El 1er diferencial elimina la tendencia
s_data_flights.diff().plot()

from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.graphics.tsaplots import plot_pacf

plot_acf(s_data_flights.diff().dropna(), lags=24)
plot_pacf(s_data_flights.diff().dropna(), lags=24)
plt.show()

# es recomendable luego de diferenciar eliminar valores faltantes, para ello se usa dropna()

# Notamos que la serie ya no tiene tendencia creciente, pero aún se nota una estacionalidad 

# El 2da diferencial elimina la estacionalidad
s_data_flights.diff().diff().plot()

s_data_flights_diff = s_data_flights.diff().diff().dropna()

from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.graphics.tsaplots import plot_pacf

plot_acf(s_data_flights_diff, lags=24)
plot_pacf(s_data_flights_diff, lags=24)
plt.show()

# es recomendable luego de diferenciar eliminar valores faltantes, para ello se usa dropna()
# los que sobresalen, te ayudan a elegir los valores de AR(p) y MA(q)

# MODELO 1: SARI

from statsmodels.tsa.statespace.sarimax import SARIMAX

models = SARIMAX(s_data_flights, order=(9,1,0), seasonal_order=(1,1,0,12),  # ajusta s
    enforce_stationarity=False,
    enforce_invertibility=False
)

results = models.fit()

# Resumen del modelo
print(results.summary())

# Pronóstico
forecast = results.forecast(steps=24)

# Visualización
plt.figure(figsize=(10, 5))
plt.plot(s_data_flights, label='Serie original')
plt.plot(forecast.index, forecast, label='Pronóstico', color='red')
plt.legend()
plt.title('Pronóstico SARI')
plt.grid(True)
plt.show()

# MODELO 2: SARIMA

from statsmodels.tsa.statespace.sarimax import SARIMAX

models = SARIMAX(s_data_flights, order=(9,1,9), seasonal_order=(1,1,1,12),  # ajusta s
    enforce_stationarity=False,
    enforce_invertibility=False
)

results = models.fit()

# Resumen del modelo
print(results.summary())

# Pronóstico
forecast = results.forecast(steps=24)

# Visualización
plt.figure(figsize=(10, 5))
plt.plot(s_data_flights, label='Serie original')
plt.plot(forecast.index, forecast, label='Pronóstico', color='red')
plt.legend()
plt.title('Pronóstico SARIMA')
plt.grid(True)
plt.show()

# MODELO 3: SARIMA

from statsmodels.tsa.statespace.sarimax import SARIMAX

models = SARIMAX(s_data_flights, order=(5,1,3), seasonal_order=(1,1,1,12),  # ajusta s
    enforce_stationarity=False,
    enforce_invertibility=False
)

results = models.fit()

# Resumen del modelo
print(results.summary())

# Pronóstico
forecast = results.forecast(steps=24)

# Visualización
plt.figure(figsize=(10, 5))
plt.plot(s_data_flights, label='Serie original')
plt.plot(forecast.index, forecast, label='Pronóstico', color='red')
plt.legend()
plt.title('Pronóstico SARIMA')
plt.grid(True)
plt.show()

# revisando los residuos

residuales = results.resid

plt.figure(figsize=(10,4))
plt.plot(residuales)
plt.title("Residuos del modelo")
plt.show()

plot_acf(residuales, lags=12)
plt.show()

from statsmodels.stats.diagnostic import acorr_breusch_godfrey
# Prueba BG con 4 lags (puedes cambiar el número)

bg_test = acorr_breusch_godfrey(results, nlags=10)

# Resultados
print(f'Estadístico LM: {bg_test[0]}')
print(f'p-value LM: {bg_test[1]}')
print(f'Estadístico F: {bg_test[2]}')
print(f'p-value F: {bg_test[3]}')

from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

forecast = results.forecast(steps=10)
y_true = s_data_flights[-10:]  # últimos 10 valores reales

mae = mean_absolute_error(y_true, forecast)
rmse = np.sqrt(mean_squared_error(y_true, forecast))
mape = np.mean(np.abs((np.array(y_true) - np.array(forecast)) / np.array(y_true))) * 100

print(f'MAE: {mae}')
print(f'RSME: {rmse}')
print(f"MAPE: {mape:.2f}%")

# REVISANDO EL MAPE, EL MODELO SE EQUIVOCA EN PROMEDIO EN UN 18%, revisando los rangos, se podría decir que es bueno.
# < 10% ---- Excelente
# [ 10% a 20% > ---- Bueno
# [ 20% a 50% > ---- Aceptable
# > 50% ---- Malo
